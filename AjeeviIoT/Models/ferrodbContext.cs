// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AjeeviIoT.Models;

public partial class ferrodbContext : DbContext
{
    public ferrodbContext(DbContextOptions<ferrodbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AddressType> AddressTypes { get; set; }

    public virtual DbSet<Addresscontact> Addresscontacts { get; set; }

    public virtual DbSet<AuthGroup> AuthGroups { get; set; }

    public virtual DbSet<AuthGroupPermission> AuthGroupPermissions { get; set; }

    public virtual DbSet<AuthPermission> AuthPermissions { get; set; }

    public virtual DbSet<AuthUser> AuthUsers { get; set; }

    public virtual DbSet<AuthUserGroup> AuthUserGroups { get; set; }

    public virtual DbSet<AuthUserUserPermission> AuthUserUserPermissions { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Component> Components { get; set; }

    public virtual DbSet<ComponentDevice> ComponentDevices { get; set; }

    public virtual DbSet<Contacttype> Contacttypes { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Designation> Designations { get; set; }

    public virtual DbSet<Device> Devices { get; set; }

    public virtual DbSet<DeviceAssign> DeviceAssigns { get; set; }

    public virtual DbSet<DeviceAttribute> DeviceAttributes { get; set; }

    public virtual DbSet<DeviceDetail> DeviceDetails { get; set; }

    public virtual DbSet<DeviceUnit> DeviceUnits { get; set; }

    public virtual DbSet<Deviceinstallation> Deviceinstallations { get; set; }

    public virtual DbSet<DjangoAdminLog> DjangoAdminLogs { get; set; }

    public virtual DbSet<DjangoContentType> DjangoContentTypes { get; set; }

    public virtual DbSet<DjangoMigration> DjangoMigrations { get; set; }

    public virtual DbSet<DjangoSession> DjangoSessions { get; set; }

    public virtual DbSet<Employeedevice> Employeedevices { get; set; }

    public virtual DbSet<Entity> Entities { get; set; }

    public virtual DbSet<Entityaddress> Entityaddresses { get; set; }

    public virtual DbSet<Entityaddressview> Entityaddressviews { get; set; }

    public virtual DbSet<Entityrelationship> Entityrelationships { get; set; }

    public virtual DbSet<Entityrole> Entityroles { get; set; }

    public virtual DbSet<Entitytype> Entitytypes { get; set; }

    public virtual DbSet<Ferrerodatafabricationconfig> Ferrerodatafabricationconfigs { get; set; }

    public virtual DbSet<Imagedetail> Imagedetails { get; set; }

    public virtual DbSet<Imagetype> Imagetypes { get; set; }

    public virtual DbSet<Iotdatafabricated> Iotdatafabricateds { get; set; }

    public virtual DbSet<Iotdatum> Iotdata { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<MasterDeviceType> MasterDeviceTypes { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<Rdlocation> Rdlocations { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<Regionaldistributor> Regionaldistributors { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<UserLogin> UserLogins { get; set; }

    public virtual DbSet<Userlogintype> Userlogintypes { get; set; }

    public virtual DbSet<Userrole> Userroles { get; set; }

    public virtual DbSet<Ward> Wards { get; set; }

    public virtual DbSet<Zone> Zones { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("address");

            entity.HasIndex(e => e.CityId, "fk_cityId");

            entity.HasIndex(e => e.CountryId, "fk_countryid2_idx");

            entity.HasIndex(e => e.Regionid, "fk_regionid");

            entity.HasIndex(e => e.Stateid, "fk_stateId2");

            entity.HasIndex(e => e.Wardid, "fk_wardid");

            entity.HasIndex(e => e.Zoneid, "fk_zoneid");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Addressline1)
                .HasMaxLength(256)
                .HasColumnName("addressline1");
            entity.Property(e => e.Addressline2).HasMaxLength(256);
            entity.Property(e => e.Latitude)
                .HasMaxLength(50)
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasMaxLength(50)
                .HasColumnName("longitude");
            entity.Property(e => e.Pincode)
                .HasMaxLength(15)
                .HasColumnName("pincode");
            entity.Property(e => e.Regionid).HasColumnName("regionid");
            entity.Property(e => e.Remarks)
                .HasColumnType("text")
                .HasColumnName("remarks");
            entity.Property(e => e.Stateid).HasColumnName("stateid");
            entity.Property(e => e.Wardid).HasColumnName("wardid");
            entity.Property(e => e.Zoneid).HasColumnName("zoneid");

            entity.HasOne(d => d.City).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.CityId)
                .HasConstraintName("fk_cityId");

            entity.HasOne(d => d.Country).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("fk_countryid1");

            entity.HasOne(d => d.Region).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.Regionid)
                .HasConstraintName("fk_regionid");

            entity.HasOne(d => d.State).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.Stateid)
                .HasConstraintName("fk_stateId2");
        });

        modelBuilder.Entity<AddressType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("address_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Addresscontact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("addresscontact");

            entity.HasIndex(e => e.Addressid, "fk_addressid");

            entity.HasIndex(e => e.Personid, "fk_personid");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Addressid).HasColumnName("addressid");
            entity.Property(e => e.Personid).HasColumnName("personid");
        });

        modelBuilder.Entity<AuthGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("auth_group");

            entity.HasIndex(e => e.Name, "name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("name");
        });

        modelBuilder.Entity<AuthGroupPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("auth_group_permissions");

            entity.HasIndex(e => e.PermissionId, "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm");

            entity.HasIndex(e => new { e.GroupId, e.PermissionId }, "auth_group_permissions_group_id_permission_id_0cd325b0_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.PermissionId).HasColumnName("permission_id");

            entity.HasOne(d => d.Group).WithMany(p => p.AuthGroupPermissions)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_group_permissions_group_id_b120cbf9_fk_auth_group_id");

            entity.HasOne(d => d.Permission).WithMany(p => p.AuthGroupPermissions)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_group_permissio_permission_id_84c5c92e_fk_auth_perm");
        });

        modelBuilder.Entity<AuthPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("auth_permission");

            entity.HasIndex(e => new { e.ContentTypeId, e.Codename }, "auth_permission_content_type_id_codename_01ab375a_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Codename)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("codename");
            entity.Property(e => e.ContentTypeId).HasColumnName("content_type_id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");

            entity.HasOne(d => d.ContentType).WithMany(p => p.AuthPermissions)
                .HasForeignKey(d => d.ContentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_permission_content_type_id_2f476e4b_fk_django_co");
        });

        modelBuilder.Entity<AuthUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("auth_user");

            entity.HasIndex(e => e.Username, "username").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateJoined)
                .HasMaxLength(6)
                .HasColumnName("date_joined");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(254)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("first_name");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsStaff).HasColumnName("is_staff");
            entity.Property(e => e.IsSuperuser).HasColumnName("is_superuser");
            entity.Property(e => e.LastLogin)
                .HasMaxLength(6)
                .HasColumnName("last_login");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("last_name");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(128)
                .HasColumnName("password");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("username");
        });

        modelBuilder.Entity<AuthUserGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("auth_user_groups");

            entity.HasIndex(e => e.GroupId, "auth_user_groups_group_id_97559544_fk_auth_group_id");

            entity.HasIndex(e => new { e.UserId, e.GroupId }, "auth_user_groups_user_id_group_id_94350c0c_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Group).WithMany(p => p.AuthUserGroups)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_user_groups_group_id_97559544_fk_auth_group_id");

            entity.HasOne(d => d.User).WithMany(p => p.AuthUserGroups)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_user_groups_user_id_6a12ed8b_fk_auth_user_id");
        });

        modelBuilder.Entity<AuthUserUserPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("auth_user_user_permissions");

            entity.HasIndex(e => e.PermissionId, "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm");

            entity.HasIndex(e => new { e.UserId, e.PermissionId }, "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.PermissionId).HasColumnName("permission_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Permission).WithMany(p => p.AuthUserUserPermissions)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm");

            entity.HasOne(d => d.User).WithMany(p => p.AuthUserUserPermissions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PRIMARY");

            entity.ToTable("city");

            entity.HasIndex(e => e.StateId, "fk_stateId");

            entity.Property(e => e.CityId).HasColumnName("City_Id");
            entity.Property(e => e.Cityname)
                .HasMaxLength(45)
                .HasColumnName("cityname");
            entity.Property(e => e.StateId).HasColumnName("stateId");

            entity.HasOne(d => d.State).WithMany(p => p.Cities)
                .HasForeignKey(d => d.StateId)
                .HasConstraintName("fk_stateId");
        });

        modelBuilder.Entity<Component>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("component");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<ComponentDevice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("component_device");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ComponentId).HasColumnName("component_id");
            entity.Property(e => e.Installdate).HasColumnName("installdate");
            entity.Property(e => e.MasterId).HasColumnName("master_id");
        });

        modelBuilder.Entity<Contacttype>(entity =>
        {
            entity.HasKey(e => e.ContactTypeId).HasName("PRIMARY");

            entity.ToTable("contacttype");

            entity.Property(e => e.ContactTypeId).HasColumnName("contact_type_id");
            entity.Property(e => e.Contacttypename)
                .HasMaxLength(45)
                .HasColumnName("contacttypename");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryId).HasName("PRIMARY");

            entity.ToTable("country");

            entity.Property(e => e.CountryId).HasColumnName("Country_Id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DId).HasName("PRIMARY");

            entity.ToTable("department");

            entity.Property(e => e.DId).HasColumnName("D_Id");
            entity.Property(e => e.DName)
                .HasMaxLength(50)
                .HasColumnName("D_Name");
        });

        modelBuilder.Entity<Designation>(entity =>
        {
            entity.HasKey(e => e.DsId).HasName("PRIMARY");

            entity.ToTable("designation");

            entity.Property(e => e.DsId).HasColumnName("Ds_Id");
            entity.Property(e => e.DsName)
                .HasMaxLength(50)
                .HasColumnName("Ds_name");
        });

        modelBuilder.Entity<Device>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("device");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Devicetypeid).HasColumnName("devicetypeid");
            entity.Property(e => e.Imie)
                .HasMaxLength(45)
                .HasColumnName("imie");
            entity.Property(e => e.Parentid).HasColumnName("parentid");
        });

        modelBuilder.Entity<DeviceAssign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("device_assign");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverpersonid).HasColumnName("approverpersonid");
            entity.Property(e => e.Deviceid).HasColumnName("deviceid");
            entity.Property(e => e.Installationdatetime)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("installationdatetime");
            entity.Property(e => e.Remarks)
                .HasColumnType("text")
                .HasColumnName("remarks");
        });

        modelBuilder.Entity<DeviceAttribute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("device_attributes");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.MaxValue)
                .HasPrecision(10, 5)
                .HasColumnName("max_value");
            entity.Property(e => e.MinValue)
                .HasPrecision(10, 5)
                .HasColumnName("min_value");
            entity.Property(e => e.Name)
                .HasMaxLength(40)
                .HasColumnName("name");
            entity.Property(e => e.Remarks)
                .HasMaxLength(45)
                .HasColumnName("remarks");
            entity.Property(e => e.StandardValue)
                .HasPrecision(10, 5)
                .HasColumnName("standard_value");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasColumnName("unit");
        });

        modelBuilder.Entity<DeviceDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("device_details");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.DTypeId).HasColumnName("d_type_id");
        });

        modelBuilder.Entity<DeviceUnit>(entity =>
        {
            entity.HasKey(e => e.UnitId).HasName("PRIMARY");

            entity.ToTable("device_unit");

            entity.Property(e => e.UnitId).HasColumnName("unit_id");
            entity.Property(e => e.Remarks)
                .HasColumnType("text")
                .HasColumnName("remarks");
            entity.Property(e => e.UnitName)
                .HasMaxLength(50)
                .HasColumnName("Unit_name");
        });

        modelBuilder.Entity<Deviceinstallation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("deviceinstallation");

            entity.Property(e => e.ApproverPersonId).HasColumnName("approverPersonId");
            entity.Property(e => e.Image).HasMaxLength(100);
            entity.Property(e => e.InstallDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.MaxSever)
                .HasPrecision(10, 2)
                .HasColumnName("Max_sever");
            entity.Property(e => e.MaxValue)
                .HasPrecision(10, 2)
                .HasColumnName("max_Value");
            entity.Property(e => e.MinValue)
                .HasPrecision(10, 2)
                .HasColumnName("minValue");
            entity.Property(e => e.Remarks).HasColumnType("text");
            entity.Property(e => e.Status).HasColumnType("enum('Active','Inactive')");
        });

        modelBuilder.Entity<DjangoAdminLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("django_admin_log");

            entity.HasIndex(e => e.ContentTypeId, "django_admin_log_content_type_id_c4bce8eb_fk_django_co");

            entity.HasIndex(e => e.UserId, "django_admin_log_user_id_c564eba6_fk_auth_user_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActionFlag).HasColumnName("action_flag");
            entity.Property(e => e.ActionTime)
                .HasMaxLength(6)
                .HasColumnName("action_time");
            entity.Property(e => e.ChangeMessage)
                .IsRequired()
                .HasColumnName("change_message");
            entity.Property(e => e.ContentTypeId).HasColumnName("content_type_id");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ObjectRepr)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("object_repr");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.ContentType).WithMany(p => p.DjangoAdminLogs)
                .HasForeignKey(d => d.ContentTypeId)
                .HasConstraintName("django_admin_log_content_type_id_c4bce8eb_fk_django_co");

            entity.HasOne(d => d.User).WithMany(p => p.DjangoAdminLogs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("django_admin_log_user_id_c564eba6_fk_auth_user_id");
        });

        modelBuilder.Entity<DjangoContentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("django_content_type");

            entity.HasIndex(e => new { e.AppLabel, e.Model }, "django_content_type_app_label_model_76bd3d3b_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AppLabel)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("app_label");
            entity.Property(e => e.Model)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("model");
        });

        modelBuilder.Entity<DjangoMigration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("django_migrations");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.App)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("app");
            entity.Property(e => e.Applied)
                .HasMaxLength(6)
                .HasColumnName("applied");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
        });

        modelBuilder.Entity<DjangoSession>(entity =>
        {
            entity.HasKey(e => e.SessionKey).HasName("PRIMARY");

            entity.ToTable("django_session");

            entity.HasIndex(e => e.ExpireDate, "django_session_expire_date_a5c62663");

            entity.Property(e => e.SessionKey)
                .HasMaxLength(40)
                .HasColumnName("session_key");
            entity.Property(e => e.ExpireDate)
                .HasMaxLength(6)
                .HasColumnName("expire_date");
            entity.Property(e => e.SessionData)
                .IsRequired()
                .HasColumnName("session_data");
        });

        modelBuilder.Entity<Employeedevice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("employeedevice");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Assigntime)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasColumnType("bit(1)")
                .HasColumnName("status");
        });

        modelBuilder.Entity<Entity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("entity");

            entity.HasIndex(e => e.EntityRoleId, "fk_roleid");

            entity.HasIndex(e => e.EntityTypeId, "fk_typeId");

            entity.Property(e => e.LongName).HasMaxLength(256);
            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.Remarks)
                .HasColumnType("text")
                .HasColumnName("remarks");
            entity.Property(e => e.ShortName).HasMaxLength(256);
            entity.Property(e => e.TradeName).HasMaxLength(256);

            entity.HasOne(d => d.EntityRole).WithMany(p => p.Entities)
                .HasForeignKey(d => d.EntityRoleId)
                .HasConstraintName("fk_roleid");

            entity.HasOne(d => d.EntityType).WithMany(p => p.Entities)
                .HasForeignKey(d => d.EntityTypeId)
                .HasConstraintName("fk_typeId");
        });

        modelBuilder.Entity<Entityaddress>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("entityaddress");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Addressid).HasColumnName("addressid");
            entity.Property(e => e.Addresstype).HasColumnName("addresstype");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
        });

        modelBuilder.Entity<Entityaddressview>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("entityaddressview");

            entity.Property(e => e.AddressTypeName).HasMaxLength(100);
            entity.Property(e => e.Addressline1).HasMaxLength(256);
            entity.Property(e => e.Addressline2).HasMaxLength(256);
            entity.Property(e => e.CityName).HasMaxLength(45);
            entity.Property(e => e.CountryName).HasMaxLength(50);
            entity.Property(e => e.Latitude).HasMaxLength(50);
            entity.Property(e => e.Longitude).HasMaxLength(50);
            entity.Property(e => e.Pincode).HasMaxLength(15);
            entity.Property(e => e.RegionName).HasMaxLength(45);
            entity.Property(e => e.Remarks).HasColumnType("text");
            entity.Property(e => e.StateName).HasMaxLength(100);
            entity.Property(e => e.WardName).HasMaxLength(100);
        });

        modelBuilder.Entity<Entityrelationship>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("entityrelationship");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.EntityroleId).HasColumnName("entityroleId");
        });

        modelBuilder.Entity<Entityrole>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PRIMARY");

            entity.ToTable("entityrole");

            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.Rolename)
                .HasMaxLength(100)
                .HasColumnName("rolename");
        });

        modelBuilder.Entity<Entitytype>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("PRIMARY");

            entity.ToTable("entitytype");

            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.EntityTypeName).HasMaxLength(100);
        });

        modelBuilder.Entity<Ferrerodatafabricationconfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ferrerodatafabricationconfig");

            entity.Property(e => e.Imie)
                .HasMaxLength(45)
                .HasColumnName("imie");
        });

        modelBuilder.Entity<Imagedetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("imagedetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Imageurl).HasMaxLength(256);
            entity.Property(e => e.UniqueId).HasMaxLength(45);
        });

        modelBuilder.Entity<Imagetype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("imagetype");

            entity.Property(e => e.ImageType1)
                .HasMaxLength(100)
                .HasColumnName("ImageType");
        });

        modelBuilder.Entity<Iotdatafabricated>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("iotdatafabricated");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Batteryvoltage)
                .HasMaxLength(10)
                .HasColumnName("batteryvoltage");
            entity.Property(e => e.Datapacketsrnum)
                .HasMaxLength(45)
                .HasColumnName("datapacketsrnum");
            entity.Property(e => e.Datasource)
                .HasMaxLength(45)
                .HasColumnName("datasource");
            entity.Property(e => e.Datatype)
                .HasMaxLength(10)
                .HasColumnName("datatype");
            entity.Property(e => e.Date)
                .HasMaxLength(10)
                .HasColumnName("date");
            entity.Property(e => e.Deviceid)
                .HasMaxLength(10)
                .HasColumnName("deviceid");
            entity.Property(e => e.Devicetype)
                .HasMaxLength(45)
                .HasColumnName("devicetype");
            entity.Property(e => e.Header)
                .HasMaxLength(10)
                .HasColumnName("header");
            entity.Property(e => e.Humidity)
                .HasMaxLength(10)
                .HasColumnName("humidity");
            entity.Property(e => e.Imie)
                .HasMaxLength(45)
                .HasColumnName("imie");
            entity.Property(e => e.Ischarging)
                .HasMaxLength(10)
                .HasColumnName("ischarging");
            entity.Property(e => e.Lastreportingtime)
                .HasColumnType("datetime")
                .HasColumnName("lastreportingtime");
            entity.Property(e => e.Lattitude)
                .HasMaxLength(10)
                .HasColumnName("lattitude");
            entity.Property(e => e.Longitude)
                .HasMaxLength(10)
                .HasColumnName("longitude");
            entity.Property(e => e.Receiveddatapacket)
                .HasMaxLength(100)
                .HasColumnName("receiveddatapacket");
            entity.Property(e => e.Signalstrength)
                .HasMaxLength(10)
                .HasColumnName("signalstrength");
            entity.Property(e => e.Temperature)
                .HasMaxLength(10)
                .HasColumnName("temperature");
            entity.Property(e => e.Temperaturealert)
                .HasMaxLength(10)
                .HasColumnName("temperaturealert");
            entity.Property(e => e.Time)
                .HasMaxLength(10)
                .HasColumnName("time");
        });

        modelBuilder.Entity<Iotdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("iotdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Batteryvoltage)
                .HasMaxLength(10)
                .HasColumnName("batteryvoltage");
            entity.Property(e => e.Datapacketsrnum)
                .HasMaxLength(45)
                .HasColumnName("datapacketsrnum");
            entity.Property(e => e.Datasource)
                .HasMaxLength(45)
                .HasColumnName("datasource");
            entity.Property(e => e.Datatype)
                .HasMaxLength(10)
                .HasColumnName("datatype");
            entity.Property(e => e.Date)
                .HasMaxLength(10)
                .HasColumnName("date");
            entity.Property(e => e.Deviceid)
                .HasMaxLength(10)
                .HasColumnName("deviceid");
            entity.Property(e => e.Devicetype)
                .HasMaxLength(45)
                .HasColumnName("devicetype");
            entity.Property(e => e.Header)
                .HasMaxLength(10)
                .HasColumnName("header");
            entity.Property(e => e.Humidity)
                .HasMaxLength(10)
                .HasColumnName("humidity");
            entity.Property(e => e.Imie)
                .HasMaxLength(45)
                .HasColumnName("imie");
            entity.Property(e => e.Ischarging)
                .HasMaxLength(10)
                .HasColumnName("ischarging");
            entity.Property(e => e.Lastreportingtime)
                .HasColumnType("datetime")
                .HasColumnName("lastreportingtime");
            entity.Property(e => e.Lattitude)
                .HasMaxLength(10)
                .HasColumnName("lattitude");
            entity.Property(e => e.Longitude)
                .HasMaxLength(10)
                .HasColumnName("longitude");
            entity.Property(e => e.Receiveddatapacket)
                .HasMaxLength(100)
                .HasColumnName("receiveddatapacket");
            entity.Property(e => e.Signalstrength)
                .HasMaxLength(10)
                .HasColumnName("signalstrength");
            entity.Property(e => e.Temperature)
                .HasMaxLength(10)
                .HasColumnName("temperature");
            entity.Property(e => e.Temperaturealert)
                .HasMaxLength(10)
                .HasColumnName("temperaturealert");
            entity.Property(e => e.Time)
                .HasMaxLength(10)
                .HasColumnName("time");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("location");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Addressid).HasColumnName("addressid");
            entity.Property(e => e.Locationname)
                .HasMaxLength(100)
                .HasColumnName("locationname");
        });

        modelBuilder.Entity<MasterDeviceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("master_device_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DeviceName)
                .HasMaxLength(40)
                .HasColumnName("device_name");
            entity.Property(e => e.Make)
                .HasMaxLength(40)
                .HasColumnName("make");
            entity.Property(e => e.Model)
                .HasMaxLength(40)
                .HasColumnName("model");
            entity.Property(e => e.Remarks).HasColumnType("text");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("person");

            entity.HasIndex(e => e.Contacttype, "fk_Contacttype");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Alternatenumber)
                .HasMaxLength(45)
                .HasColumnName("alternatenumber");
            entity.Property(e => e.Contacttype).HasColumnName("contacttype");
            entity.Property(e => e.DepartmentId).HasColumnName("departmentId");
            entity.Property(e => e.DesignationId).HasColumnName("designationId");
            entity.Property(e => e.Email)
                .HasMaxLength(45)
                .HasColumnName("email");
            entity.Property(e => e.Firstname)
                .HasMaxLength(45)
                .HasColumnName("firstname");
            entity.Property(e => e.Imageurl)
                .HasMaxLength(256)
                .HasColumnName("imageurl");
            entity.Property(e => e.Lastname)
                .HasMaxLength(100)
                .HasColumnName("lastname");
            entity.Property(e => e.Mobilenumber)
                .HasMaxLength(45)
                .HasColumnName("mobilenumber");
            entity.Property(e => e.Remarks)
                .HasColumnType("text")
                .HasColumnName("remarks");
        });

        modelBuilder.Entity<Rdlocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("rdlocations");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Locationid).HasColumnName("locationid");
            entity.Property(e => e.RdId).HasColumnName("rdId");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.HasKey(e => e.RegionId).HasName("PRIMARY");

            entity.ToTable("region");

            entity.Property(e => e.RegionId).HasColumnName("Region_Id");
            entity.Property(e => e.Regionname)
                .HasMaxLength(45)
                .HasColumnName("regionname");
        });

        modelBuilder.Entity<Regionaldistributor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("regionaldistributor");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Rdcode)
                .HasMaxLength(45)
                .HasColumnName("RDCode");
            entity.Property(e => e.Rdname)
                .HasMaxLength(100)
                .HasColumnName("RDName");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => e.StateId).HasName("PRIMARY");

            entity.ToTable("state");

            entity.HasIndex(e => e.CountryId, "fk_countryId");

            entity.Property(e => e.StateId).HasColumnName("State_Id");
            entity.Property(e => e.CountryId).HasColumnName("Country_Id");
            entity.Property(e => e.Statename)
                .HasMaxLength(100)
                .HasColumnName("statename");

            entity.HasOne(d => d.Country).WithMany(p => p.States)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("fk_countryId");
        });

        modelBuilder.Entity<UserLogin>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PRIMARY");

            entity.ToTable("user_login");

            entity.HasIndex(e => e.UserroleId, "FK_user_login_userrole");

            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.EntityId).HasColumnName("Entity_Id");
            entity.Property(e => e.LoginDate)
                .HasColumnType("datetime")
                .HasColumnName("Login_Date");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(20)
                .HasColumnName("mobile_no");
            entity.Property(e => e.Password).HasMaxLength(500);
            entity.Property(e => e.Status).HasColumnType("bit(1)");
            entity.Property(e => e.UserFname)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("User_fname");
            entity.Property(e => e.UserLname)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("User_lname");

            entity.HasOne(d => d.Userrole).WithMany(p => p.UserLogins)
                .HasForeignKey(d => d.UserroleId)
                .HasConstraintName("FK_user_login_userrole");
        });

        modelBuilder.Entity<Userlogintype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("userlogintype");

            entity.Property(e => e.RoleId).HasDefaultValueSql("'4'");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Userrole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("userrole");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.RoleType).HasMaxLength(50);
        });

        modelBuilder.Entity<Ward>(entity =>
        {
            entity.HasKey(e => e.WardId).HasName("PRIMARY");

            entity.ToTable("ward");

            entity.HasIndex(e => e.Stateid, "fk_wardstate_idx");

            entity.Property(e => e.WardId).HasColumnName("Ward_Id");
            entity.Property(e => e.Stateid).HasColumnName("stateid");
            entity.Property(e => e.Wardname)
                .HasMaxLength(100)
                .HasColumnName("wardname");

            entity.HasOne(d => d.State).WithMany(p => p.Wards)
                .HasForeignKey(d => d.Stateid)
                .HasConstraintName("fk_stateidward");
        });

        modelBuilder.Entity<Zone>(entity =>
        {
            entity.HasKey(e => e.ZoneId).HasName("PRIMARY");

            entity.ToTable("zone");

            entity.Property(e => e.ZoneId).HasColumnName("Zone_Id");
            entity.Property(e => e.Zonename)
                .HasMaxLength(45)
                .HasColumnName("zonename");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}